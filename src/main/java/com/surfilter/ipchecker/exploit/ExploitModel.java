package com.surfilter.ipchecker.exploit;

import com.alibaba.fastjson.JSON;
import com.surfilter.ipchecker.util.HttpClientUtil;
import com.surfilter.ipchecker.util.MapFieldUtil;
import org.apache.log4j.Logger;

import java.io.*;
import java.util.*;

public class ExploitModel {

    public static final Logger log = Logger.getLogger(ExploitModel.class);

    public void model(String sourcePath, String modelPath) {
        log.info("开始模型抽取.................................................");
        if (sourcePath == null || modelPath == null) {
            throw new IllegalArgumentException();
        }
        BufferedReader bufferedReader = null;
        BufferedWriter bufferedWriter = null;
        String readLine = null;
        try {
            bufferedReader = new BufferedReader(new FileReader(new File(sourcePath)));
            bufferedWriter = new BufferedWriter(new FileWriter(new File(modelPath)));

            while ((readLine = bufferedReader.readLine()) != null) {
                if (readLine == null || "".equals(readLine)) {
                    continue;
                }
                Map sourceMap = JSON.parseObject(readLine, Map.class);
                //记录添加key关键字 区别重复数据
                sourceMap.put("key", UUID.randomUUID().toString().replace("-", ""));
                String has_exploit = sourceMap.get("has_exploit").toString();
                boolean hasMatch = false;
                if ("true".equalsIgnoreCase(has_exploit)) {
                    String exploit_uuid = sourceMap.get("exploit.uuid").toString();
                    List<Map<String, Object>> results = query("uuid", exploit_uuid);
                    if (results != null && results.size() != 0) {
                        Map<String, Object> stringObjectMap = results.get(0);
                        sourceMap.putAll(stringObjectMap);
                        hasMatch = true;
                    }
                }
                if (!hasMatch) {
                    for (String recordField : recordFields) {
                        sourceMap.put(recordField, "");
                    }
                }
                //将sourceMap保存到文件
                String jsonString = JSON.toJSONString(sourceMap);
                log.info(jsonString);
                bufferedWriter.write(jsonString);
                bufferedWriter.newLine();
            }
        } catch (Exception e1) {
            log.error(e1);
            e1.printStackTrace();
        } finally {
            try {
                if (bufferedReader != null) bufferedReader.close();
                if (bufferedWriter != null) bufferedWriter.close();
            } catch (IOException e) {
                log.error(e);
            }
            log.info("结束模型抽取.................................................");
        }
    }

    /**
     * 查询
     *
     * @param queryFieldName
     * @param queryFieldValue
     * @return
     */
    public List<Map<String, Object>> query(String queryFieldName, String queryFieldValue) {
        String baseURL = ELASTICSEARCH_WSCAN_URL + "/_search?q=" + queryFieldName + ":" + queryFieldValue;
        String result = HttpClientUtil.get(baseURL);
        Map resultMapObject = JSON.parseObject(result, Map.class);
        Map hitMap = (Map) resultMapObject.get("hits");

        List<Map> records = (List<Map>) hitMap.get("hits");
        if (records.size() == 0) {
            return null;
        }
        List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();
        for (Map recordMap : records) {
            Map _sourceMap = (Map) recordMap.get("_source");
            Map<String, Object> resultMap = new HashMap<String, Object>();
            for (String recordField : recordFields) {
                String fieldValue = MapFieldUtil.getFieldValue(_sourceMap, recordField);
                resultMap.put(recordField, fieldValue);
            }
            results.add(resultMap);
        }
        return results;
    }

    public String ELASTICSEARCH_BASE_URL = null;
    public String ELASTICSEARCH_WSCAN_URL = null;

    private String host;
    private String indexName;
    private String typeName;
    private String[] recordFields;

    public ExploitModel(String host, String indexName, String typeName, String[] recordFields) {
        super();
        this.host = host;
        this.indexName = indexName;
        this.typeName = typeName;
        this.recordFields = recordFields;
        ELASTICSEARCH_BASE_URL = host;
        ELASTICSEARCH_WSCAN_URL = host + "/" + indexName + "/" + typeName;
    }

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public String getIndexName() {
        return indexName;
    }

    public void setIndexName(String indexName) {
        this.indexName = indexName;
    }

    public String getTypeName() {
        return typeName;
    }

    public void setTypeName(String typeName) {
        this.typeName = typeName;
    }

    public String[] getRecordFields() {
        return recordFields;
    }

    public void setRecordFields(String[] recordFields) {
        this.recordFields = recordFields;
    }
}
