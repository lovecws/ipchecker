package com.surfilter.ipchecker.statistical.spark;

import com.alibaba.fastjson.JSON;
import org.apache.log4j.Logger;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SQLContext;
import org.apache.spark.storage.StorageLevel;
import scala.Tuple2;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.Serializable;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class ExploitStatistical implements Serializable {

    public static final Logger log = Logger.getLogger(ExploitStatistical.class);

    public void statistical(String modelPath, String outputPath) {
        log.info("开始事件统计(" + filterValue + ")分析.................................................");
        if (modelPath == null || outputPath == null) {
            throw new IllegalArgumentException();
        }

        BufferedWriter bufferedWriter = null;
        try {
            bufferedWriter = new BufferedWriter(new FileWriter(new File(outputPath), true));
            bufferedWriter.write("江西漏洞(" + filterValue + ")统计");
            bufferedWriter.newLine();
            bufferedWriter.newLine();

            // 漏洞级别分布
            Map<Object, Long> CVSSRiskLevelMap = fieldCounter("CVSS.riskLevel", modelPath, null);
            writeEvent("漏洞级别分布(CVSS.riskLevel)", bufferedWriter, CVSSRiskLevelMap);

            // 漏洞类型分布
            Map<Object, Long> ipOperatorMap = fieldCounter("vulnerability.vulType", modelPath, null);
            writeEvent("漏洞类型分布(vulnerability.vulType)", bufferedWriter, ipOperatorMap);

            // 全省设备数量分布
            Map<Object, Long> productVendorMap = fieldCounter("location.city.zh-CN,product.vendor=*", modelPath,
                    null);
            writeEvent("全省设备数量分布(location.city.zh-CN,product.vendor=*)", bufferedWriter, productVendorMap);

            // 全省漏洞数量分布
            Map<Object, Long> riskLevelCountMap = fieldCounter("location.city.zh-CN,CVSS.riskLevel=*", modelPath,
                    null);
            writeEvent("全省漏洞数量分布(location.city.zh-CN,CVSS.riskLevel=*)", bufferedWriter, riskLevelCountMap);

            // 全省漏洞分布
            Map<Object, Long> riskLevelMap = fieldCounter("location.city.zh-CN,CVSS.riskLevel", modelPath,
                    null);
            writeEvent("全省漏洞分布(location.city.zh-CN,CVSS.riskLevel)", bufferedWriter, riskLevelMap);
        } catch (Exception e) {
            log.error(e);
        } finally {
            try {
                if (bufferedWriter != null) bufferedWriter.close();
            } catch (Exception e) {
            }
            log.info("结束事件统计分析.................................................");
        }
    }

    public static final String _FILTER = "_FILTER";

    public Map<Object, Long> fieldCounter(String fieldName, String sourcePath, String outputPath) {
        JavaSparkContext javaSparkContext = new SparkClient().javaSparkContext();
        JavaRDD<String> sourceRDD = javaSparkContext.textFile(sourcePath);
        sourceRDD.persist(StorageLevel.MEMORY_ONLY());
        JavaPairRDD<Object, Integer> mapToPairRDD = sourceRDD.mapToPair(new PairFunction<String, Object, Integer>() {
            @Override
            public Tuple2<Object, Integer> call(String line) throws Exception {
                if (line == null) {
                    return null;
                }
                Map _sourceMap = JSON.parseObject(line, Map.class);
                //过滤数据
                if (filterName != null && filterValue != null) {
                    Object filterObjectValue = _sourceMap.get(filterName);
                    if (filterObjectValue == null || !filterValue.equalsIgnoreCase(filterObjectValue.toString())) {
                        return new Tuple2<>(_FILTER, 0);
                    }
                }
                String statisticalField = null;
                for (String fd : fieldName.split(",")) {
                    String fieldName = null;
                    String fieldValueScope = null;
                    String[] fieldValuesArray = fd.split("=");
                    if (fieldValuesArray.length < 2) {
                        fieldName = fieldValuesArray[0];
                    } else if (fieldValuesArray.length == 2) {
                        fieldName = fieldValuesArray[0];
                        fieldValueScope = fieldValuesArray[1];
                    }
                    Object fieldValue = _sourceMap.get(fieldName);
                    if (fieldValue == null || "".equalsIgnoreCase(fieldValue.toString())) {
                        fieldValue = _FILTER;
                    }
                    if (fieldValueScope == null) {
                        fieldValue = fieldValue;
                    } else if ("*".equalsIgnoreCase(fieldValueScope)) {
                        if (!_FILTER.equalsIgnoreCase(fieldValue.toString())) {
                            fieldValue = "*";
                        }
                    } else if (!fieldValueScope.contains(fieldValue.toString())) {
                        fieldValue = _FILTER;
                    }
                    if (statisticalField == null) {
                        statisticalField = fieldValue.toString();
                    } else {
                        statisticalField = statisticalField + "-" + fieldValue;
                    }
                }
                return new Tuple2<>(statisticalField, 1);
            }
        });
        //过滤不需要的数据
        JavaPairRDD<Object, Integer> filterRDD = mapToPairRDD.filter(new Function<Tuple2<Object, Integer>, Boolean>() {
            @Override
            public Boolean call(Tuple2<Object, Integer> v1) throws Exception {
                if (v1 == null) {
                    return false;
                }
                return !v1._1.toString().contains(_FILTER);
            }
        });
        Map<Object, Long> countMap = filterRDD.countByKey();
        System.out.println(countMap);

        if (outputPath != null) {
            JavaPairRDD<Object, Integer> reduceRDD = filterRDD.reduceByKey(new Function2<Integer, Integer, Integer>() {
                @Override
                public Integer call(Integer v1, Integer v2) throws Exception {
                    return v1 + v2;
                }
            });
            reduceRDD.saveAsTextFile(outputPath);
        }
        return countMap;
    }

    public List<Row> fieldCounterBySQL(String viewName, String querySQL, String sourcePath, String outputPath) {
        SQLContext sqlContext = new SparkClient().sqlContext();
        Dataset<Row> rowDataset = sqlContext.read().json(sourcePath);

        rowDataset.persist(StorageLevel.MEMORY_ONLY());

        rowDataset.createOrReplaceTempView(viewName);
        StringBuilder paramBuilder = new StringBuilder();

        //rowDataset.sqlContext().sql("select `CVSS.riskLevel`,count(1) count from ip_sources where `CVSS.riskLevel`!=''group by `CVSS.riskLevel` order by count desc").show(10);
        //Dataset<Row> rowResultDataset = rowDataset.groupBy("`CVSS.riskLevel`").count();

        Dataset<Row> rowResultDataset = rowDataset.sqlContext().sql(querySQL);
        rowResultDataset.persist(StorageLevel.MEMORY_ONLY());

        if (outputPath != null) {
            rowResultDataset.toJavaRDD().saveAsObjectFile(outputPath);
        }
        return rowResultDataset.collectAsList();
    }

    /**
     * 将事件统计信息写入到文件中
     *
     * @param title
     * @param bufferedWriter
     * @param resultMap
     */
    public void writeEvent(String title, BufferedWriter bufferedWriter, Map<Object, Long> resultMap) {
        try {
            bufferedWriter.write(title);
            bufferedWriter.newLine();
            Map<Object, Long> treeMap = new TreeMap<Object, Long>(new Comparator<Object>() {
                public int compare(Object obj1, Object obj2) {
                    return obj2.toString().compareTo(obj1.toString());
                }
            });
            treeMap.putAll(resultMap);
            for (Map.Entry<Object, Long> entry : treeMap.entrySet()) {
                bufferedWriter.write(entry.getKey() + " : " + entry.getValue());
                log.info(title + " " + JSON.toJSONString(entry));
                bufferedWriter.newLine();
            }
            bufferedWriter.newLine();
        } catch (Exception e) {
            log.error(e);
        }
    }

    public static void main(String[] args) {
        ExploitStatistical exploitStatistical = new ExploitStatistical("device.primary_type", "IOT", "江西");

        String basePath = System.getProperty("user.dir").replace("\\", "/");
        String modelPath = basePath + "/event/jiangxi/20180619120258/exploit_model.json";
        //exploitStatistical.fieldCounter("location.city.zh-CN,CVSS.riskLevel=*", modelPath, null);
        //exploitStatistical.fieldCounter("location.city.zh-CN,product.vendor=*", modelPath, null);
        //exploitStatistical.fieldCounter("location.city.zh-CN,CVSS.riskLevel", modelPath, null);

        String statisticalPath = basePath + "/event/jiangxi/20180619120258/exploit_statistical.txt";
        exploitStatistical.statistical(modelPath, statisticalPath);
    }

    private String filterName;
    private String filterValue;
    private String provinceName;

    public ExploitStatistical(String filterName, String filterValue, String provinceName) {
        this.filterName = filterName;

        if (filterValue == null || "".equalsIgnoreCase(filterValue)) {
            filterValue = "ALL";
        }
        this.filterValue = filterValue;
        this.provinceName = provinceName;
    }

    public String getFilterName() {
        return filterName;
    }

    public void setFilterName(String filterName) {
        this.filterName = filterName;
    }

    public String getFilterValue() {
        return filterValue;
    }

    public void setFilterValue(String filterValue) {
        this.filterValue = filterValue;
    }

    public String getProvinceName() {
        return provinceName;
    }

    public void setProvinceName(String provinceName) {
        this.provinceName = provinceName;
    }
}
